# Configuration file for the automatic generation of the input options parsing

package "pcomet"
version "1.1"
versiontext "Authors: Mingming Chen <mileschen2008@gmail.com> and Sisi Liu <liusisiapply@gmail.com>
Collaborator: Boleslaw K. Szymanski <szymab@rpi.edu>
Extended by: Artem Lutov <artem@exascale.info>
Sources:  https://github.com/eXascaleInfolab/ParallelComMetric
"

purpose "A parallel toolkit, implemented with Pthreads (or MPI), to calculate the
 community quality metrics with and without ground truth community structure.

Paper: Mingming Chen, Sisi Liu, and Boleslaw Szymanski, \"Parallel Toolkit for
 Measuring the Quality of Network Community Structure\", The First European
 Network Intelligence Conference (ENIC), Wroclaw, Poland, September, 2014, pp. 22-29.
"

usage "pcomet [OPTIONS] ground-truth|ipnut-network clustering

  ground-truth  - ground-truth clustering (communities) for the extrinsic metrics\
 evaluation. The clusterins are specified in the NCL format, where each line consists\
 of the member node ids of the respective cluster (community).
  ipnut-network  - input network for the intrinsic metrics evaluation. The input\
 network is specified in the NSL format, where each line describes the respective\
 link: <src_id> <dst_id> [<weight>].
  clustering  - input file, collection of the clusters (detected communities) to\
 be evaluated. in the NCL format, where each line list member node ids of the\
 respective cluster (community).

Examples:
  $ ./pcomet -n 4 -ef1m ./dataset/football_true_community.groups ./dataset/football_detected_community.groups
  $ ./pcomet -n 4 -i ./dataset/football_network.pairs ./dataset/football_detected_community.groups
"

description "Extrinsic or intrinsic measures are evaluated. For the extrinsic\
 measures, two input clusterings (collections of clusters/communities) are compared\
 to each other, whether one of them typically is a ground-truth clustering.\
 For the intrinsic measures, the clustering is processed together with the respective\
 input network (graph).
"

option  "num" n  "the number of threads to be used." short default="1"
option  "cpufreq" f  "CPU frequency to measure timing of the metrics, MHz (can be fetched by `$ lscpu`)." short default="2100"

defgroup "gr_metrics" groupdesc="Quality metrics type to be evaluated" required

groupoption  "extrinsic" e "extrinsic quality metrics to be evaluated" enum values="all","f1m","nvd" default="all" group="gr_metrics" argoptional
# vi nmi f1m nvd ri ari ji

groupoption  "intrinsic" i "intrinsic quality metrics to be evaluated" enum values="all" default="all" group="gr_metrics" argoptional
option  "weighted" w  "the input network is weighted" flag off dependon="intrinsic"
option  "directed" d  "the input network is directed" flag off dependon="intrinsic"
# modularity Qds intraEdges intraDensity contraction interEdges expansion conductance

# Set optional options by default, allow input file names to be unnamed parameters
args "--default-optional --unamed-opts=files"
#args "--unamed-opts=clusterings"   # Allow input files to be unnamed parameters

# = Changelog =
# v1.1 - Standard console interface added, options refined
# v1.0 - Initial Release


# Basic structure, see https://www.gnu.org/software/gengetopt/gengetopt.html#Basic-Usage
#     package "<packname>"
#     version "<version>"
#     purpose "<purpose>"
#     usage "<usage>"
#     description "<description>"
#     versiontext "<versiontext>"
#
#     args "<command line options>"
#
#     option <long> <short> "<desc>"
#         {details="<detailed description>"}
#         {argtype} {typestr="<type descr>"}
#         {values="<value1>","<value2>",...}
#         {default="<default value>"}
#         {dependon="<other option>"}
#         {required} {argoptional} {multiple}
#         {hidden}
#
#     option <long> <short> "<desc>" flag <on/off>
#
#     section "section name" {sectiondesc="optional section description"}
#
#     text "a textual sentence"
#
#
# Mutually exclusive options should belong to a group:
#
#     defgroup "<group name>" {groupdesc="<group description>"} {required}
#     groupoption <long> <short> "<desc>" <argtype> group="<group name>" \
#          {argoptional} {multiple}
#
#     defgroup "my grp2"
#     defgroup "grp1" groupdesc="an option of this group is required" required
#     groupoption "opta" a "string a" group="grp1" multiple
